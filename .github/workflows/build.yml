name: Build Executables

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.9'
            platform: linux
          - os: ubuntu-latest
            python-version: '3.10'
            platform: linux
          - os: ubuntu-latest
            python-version: '3.11'
            platform: linux
          - os: macos-latest
            python-version: '3.9'
            platform: macos
          - os: macos-latest
            python-version: '3.10'
            platform: macos
          - os: macos-latest
            python-version: '3.11'
            platform: macos
          - os: windows-latest
            python-version: '3.9'
            platform: windows
          - os: windows-latest
            python-version: '3.10'
            platform: windows
          - os: windows-latest
            python-version: '3.11'
            platform: windows

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # Windows 特定依赖
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "Installing Windows-specific dependencies..."
          pip install pywin32-ctypes
          pip install pyinstaller-hooks-contrib
          pip install pywin32
        fi

    - name: Check Windows environment
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "PyInstaller version: $(pyinstaller --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Python packages:"
        pip list

    - name: Build executable
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "Building for Windows..."
          echo "Current directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "PyInstaller version: $(pyinstaller --version)"
          echo "Directory contents:"
          ls -la
          echo "Starting PyInstaller build..."
          python -m PyInstaller --onefile --name=tinypng.exe tinypng_cli.py --log-level DEBUG --clean --noconfirm --hidden-import=win32api --hidden-import=win32con
          echo "Build completed with exit code: $?"
          echo "Checking dist directory:"
          ls -la dist/ || echo "dist directory not found"
        else
          echo "Building for ${{ matrix.platform }}..."
          python -m PyInstaller --onefile --name=tinypng tinypng_cli.py
        fi

    - name: Test executable
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "Testing Windows executable..."
          echo "Checking executable file:"
          ls -la dist/tinypng.exe
          echo "File size: $(stat -c%s dist/tinypng.exe 2>/dev/null || stat -f%z dist/tinypng.exe 2>/dev/null || echo 'unknown') bytes"
          echo "Attempting to run executable..."
          # Windows CI 环境可能无法运行可执行文件，我们只检查文件是否存在和大小
          if [ -f "./dist/tinypng.exe" ]; then
            echo "✅ Windows executable created successfully"
            echo "File exists and size is reasonable"
          else
            echo "❌ Windows executable not found"
            exit 1
          fi
        else
          ./dist/tinypng --help
        fi



    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tinypng-${{ matrix.platform }}-${{ matrix.python-version }}
        path: dist/

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          tinypng-*/dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
